package entities.thread;

import entities.UETLogger;
import entities.parser.object.IFunctionNode;
import entities.parser.object.INode;
import entities.parser.object.ISourcecodeFileNode;
import entities.search.Search;
import entities.search.condition.AbstractFunctionNodeCondition;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * Manage all threads in aka
 */
public class ThreadManager
{
    final static UETLogger logger = UETLogger.get(ThreadManager.class);

    public static List<SquasThread> squasThreadList = new ArrayList<>();

    // MULTIPLE TEST CASE EXECUTION - BEGIN
    public static final int MAX_EXECUTED_TESTCASES = 5;
    public static  ExecutorService executedTestcaseThreadPool = Executors.newFixedThreadPool(MAX_EXECUTED_TESTCASES);
    // MULTIPLE TEST CASE EXECUTION - END

    //---------------------------------
    // AUTOMATED TEST DATA GENERATION - BEGIN
    public static final int MAX_FUNCTIONS = 2;
    public static  ExecutorService autoTestdataGenForSrcFileThreadPool = Executors.newFixedThreadPool(MAX_FUNCTIONS);
    // AUTOMATED TEST DATA GENERATION - END
    //---------------------------------


    //---------------------------------
    // AUTOMATED TEST DATA GENERATION - BEGIN
    public static final int MAX_ITERATIONS= 5;
    public static  ExecutorService autoTestdataGenForFunctionThreadPool = Executors.newFixedThreadPool(MAX_ITERATIONS);
    // AUTOMATED TEST DATA GENERATION - END
    //---------------------------------

    public static List<SquasThread> getTotalRunningThreads() {
        List<SquasThread> threads = new ArrayList<>();
        for (SquasThread thread : squasThreadList) {
            if (thread.getTask().isRunning())
                threads.add(thread);
        }
        return threads;
    }

    public static void stopAutomatedTestdataGenerationForAll(INode root){
        List<INode> functionNodes = Search.searchNodes(root, new AbstractFunctionNodeCondition());
        if (root instanceof IFunctionNode)
            functionNodes.add(root);
        for (INode functionNode: functionNodes)
            if (functionNode instanceof IFunctionNode)
                stopAutomatedTestdataGenerationThreadForAFunction((IFunctionNode) functionNode);
    }

    public static void stopAutomatedTestdataGenerationThreadForAFunction(IFunctionNode functionNode) {
        // stop all threads which used to execute a test case
//        for (SquasThread squasThread : squasThreadList) {
//            if (squasThread.getTask() instanceof AutoGeneratedTestCaseExecTask) {
//                if (((AutoGeneratedTestCaseExecTask) squasThread.getTask()).getFunctionNode().getAbsolutePath().equals(functionNode.getAbsolutePath())) {
//                    logger.debug("Interrupt automated test data generation for " + functionNode.getAbsolutePath());
//                    squasThread.interrupt();
//                }
//            } else if (squasThread.getTask() instanceof GenerateTestdataTask) {
//                if (((GenerateTestdataTask) squasThread.getTask()).getFunction().getAbsolutePath().equals(functionNode.getAbsolutePath())) {
//                    logger.debug("Interrupt automated test data generation for " + functionNode.getAbsolutePath());
//                    squasThread.interrupt();
//                }
//            }
//        }
    }

    public static List<SquasThread> getTotalRunningThreads(ISourcecodeFileNode srcNode) {
        List<SquasThread> threads = new ArrayList<>();
        List<INode> functionNodes = Search.searchNodes(srcNode, new AbstractFunctionNodeCondition());

//        for (INode functionNode : functionNodes)
//            for (SquasThread squasThread : squasThreadList)
//                if (squasThread.getTask().isRunning()) {
//                    if (squasThread.getTask() instanceof GenerateTestdataTask) {
//                        if (((GenerateTestdataTask) squasThread.getTask()).getFunction().getAbsolutePath()
//                                .equals(functionNode.getAbsolutePath())) {
//                            threads.add(squasThread);
//                        }
//                    } else if (squasThread.getTask() instanceof AutoGeneratedTestCaseExecTask) {
//                        if (((AutoGeneratedTestCaseExecTask) squasThread.getTask()).getFunctionNode().getAbsolutePath()
//                                .equals(functionNode.getAbsolutePath()))
//                            threads.add(squasThread);
//                    }
//                }
        return threads;
    }

    public static void stopAutomatedTestdataGenerationThreadForASourcecodeFile(ISourcecodeFileNode srcNode) {
        logger.debug("stopAutomatedTestdataGenerationThreadForASourcecodeFile");
        List<INode> functionNodes = Search.searchNodes(srcNode, new AbstractFunctionNodeCondition());
        logger.debug("The number of threads = " + squasThreadList.size());

        // stop all threads which used to execute a test case
        for (INode function: functionNodes)
            if (function instanceof IFunctionNode)
            stopAutomatedTestdataGenerationThreadForAFunction((IFunctionNode) function);

        // stop all threads which used to generate test data automatically for source code file
//        for (INode functionNode : functionNodes)
//            for (SquasThread squasThread : squasThreadList) {
//                if (squasThread.getTask() instanceof GenerateTestdataTask) {
//                    if (((GenerateTestdataTask) squasThread.getTask()).getFunction().getAbsolutePath().equals(functionNode.getAbsolutePath())) {
//                        logger.debug("Interrupt automated test data generation for " + functionNode.getAbsolutePath());
//                        squasThread.interrupt();
//                    }
//                }
//            }
    }

    public static void removeDoneAutomatedTestdataGenThreads(){
//        for (int i = squasThreadList.size() - 1; i >= 0; i--)
//            if (squasThreadList.get(i).getTask() instanceof AutoGeneratedTestCaseExecTask
//                    || squasThreadList.get(i).getTask() instanceof GenerateTestdataTask)
//                if (squasThreadList.get(i).getTask().isDone())
//                    squasThreadList.remove(i);
    }

    public static boolean hasAutomatedTestdataGenerationThread(ISourcecodeFileNode functionNode) {
//        for (SquasThread squasThread : squasThreadList) {
//            if (squasThread.getTask() instanceof AutoGeneratedTestCaseExecTask && squasThread.getTask().isRunning()) {
//                ISourcecodeFileNode fileNode = Utils.getSourcecodeFile(((AutoGeneratedTestCaseExecTask) squasThread.getTask()).getFunctionNode());
//                if (fileNode.getAbsolutePath().equals(functionNode.getAbsolutePath())) {
//                    return true;
//                }
//            }
//        }
        return false;
    }

    public static boolean runningAtLeastOneAutomatedTestdataGenerationThread() {
//        for (SquasThread squasThread : squasThreadList) {
//            if (squasThread.getTask() instanceof AutoGeneratedTestCaseExecTask && squasThread.getTask().isRunning())
//                return true;
//            else if (squasThread.getTask() instanceof GenerateTestdataTask && squasThread.getTask().isRunning())
//                return true;
//        }
        return false;
    }
}
